# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'd4a6c1bb-3e11-429d-aefb-b7697f826f83'

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)
  clientFolder: $(rootFolder)/front-end
  apiFolder: $(rootFolder)/back-end

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: ApiBuild
    displayName: 'Build API Service'
    pool: MVSLocalPool1
    steps:

    - task: ArchiveFiles@2
      displayName: 'Publish Api Package'
      inputs:
        rootFolderOrFile: $(apiFolder)
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: api

  - job: ClientBuild
    displayName: 'Build Client'
    pool: MVSLocalPool1
    steps:
    - script: yarn install
      workingDirectory: $(clientFolder)
      displayName: 'Install packages'
    
    - script: yarn build
      workingDirectory: $(clientFolder)
      displayName: 'Build React App'

    - task: ArchiveFiles@2
      displayName: 'Public App Package'
      inputs:
        rootFolderOrFile: $(clientFolder)/build
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: app

- stage: Deploy
  displayName: Deploy App
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployApi
    displayName: 'Deploy: lamp2-ams-api'
    environment: Testing
    pool: MVSLocalPool1
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy lamp2-ams-api'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: lamp2-ams-api
              packageForLinux: '$(Pipeline.Workspace)/api/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|14-lts'
              StartupCommand: npm run start
              ScriptType: 'Inline Script'
              InlineScript: |
                npm install --prod
                npm run build --if-present
  - deployment: DeployApp
    displayName: 'Deploy: lamp2-ams-app'
    environment: Testing
    pool: MVSLocalPool1
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy lamp2-ams-app'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: lamp2-ams-app
              packageForLinux: '$(Pipeline.Workspace)/app/$(Build.BuildId).zip'
